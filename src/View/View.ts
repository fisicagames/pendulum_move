// src\View\View.ts
import { Scene, Vector3, Mesh } from "@babylonjs/core";
import { AdvancedDynamicTexture, Button, Rectangle, TextBlock } from "@babylonjs/gui";
import { IView } from "./IView";
import { ViewLanguageSwitcher } from "./ViewLanguageSwitcher";
//TODO: Display pendulum variables in the GUI for the physics simulation.
export class View implements IView {
    private scene: Scene;
    public advancedTexture: AdvancedDynamicTexture;
    private rectangleMenu: Rectangle;
    private buttonMenuStart: Button;
    private buttonMenuContinuar: Button;
    private buttonMenu: Button;
    private textblockLevel: TextBlock;
    private rectangleTouch: Rectangle;
    private rectangleTop: Rectangle;
    public textblockMenuMusic: TextBlock;
    private isMusicOn: boolean = true;
    private buttonLang: Button;
    private languageSwitcher: ViewLanguageSwitcher;
    private buttonUp: Button;
    private buttonDown: Button;
    private buttonRight: Button;
    private buttonLeft: Button;

    private rectangleGame: Rectangle;
    private textblockMenuBest: TextBlock;
    private textblockTotalScore: TextBlock;

    private topScore: number = 0;

    private textblockScoreGame: TextBlock;
    private textblockCenterPhrase: TextBlock;

    constructor(scene: Scene, advancedTexture: AdvancedDynamicTexture) {
        this.scene = scene;
        this.advancedTexture = advancedTexture;
        this.languageSwitcher = new ViewLanguageSwitcher();
        this.initializeGUI();
    }

    public changeLanguage(): void {
        this.languageSwitcher.changeLanguage(this.advancedTexture);
    }

    private initializeGUI() {
        this.buttonMenuStart = this.advancedTexture.getControlByName("ButtonMenuStart") as Button;
        this.buttonMenu = this.advancedTexture.getControlByName("ButtonMenu") as Button;
        this.buttonMenu.isVisible = false;
        this.buttonMenuContinuar = this.advancedTexture.getControlByName("ButtonMenuContinuar") as Button;        
        this.rectangleMenu = this.advancedTexture.getControlByName("RectangleMenu") as Rectangle;
        this.rectangleMenu.isVisible = true;
        this.textblockLevel = this.advancedTexture.getControlByName("TextblockLevel") as TextBlock;
        this.textblockLevel.isVisible = false;
        this.rectangleTouch = this.advancedTexture.getControlByName("RectangleTouch") as Rectangle;
        this.rectangleTouch.isVisible = false;
        this.rectangleTop = this.advancedTexture.getControlByName("RectangleTop") as Rectangle;
        this.rectangleTop.isVisible = false;
        this.textblockMenuMusic = this.advancedTexture.getControlByName("TextblockMenuMusic") as TextBlock;
        this.buttonLang = this.advancedTexture.getControlByName("ButtonLang") as Button;

        this.buttonUp = this.advancedTexture.getControlByName("ButtonUp") as Button;
        this.buttonDown = this.advancedTexture.getControlByName("ButtonDown") as Button;
        this.buttonLeft = this.advancedTexture.getControlByName("ButtonRight") as Button;
        this.buttonRight = this.advancedTexture.getControlByName("ButtonLeft") as Button;

        this.buttonDown.isVisible = false;
        this.buttonRight.isVisible = false;
        this.buttonLeft.isVisible = false;

        this.rectangleGame = this.advancedTexture.getControlByName("RectangleGame") as Rectangle;
        this.rectangleGame.isVisible = false;

        this.textblockMenuBest = this.advancedTexture.getControlByName("TextblockMenuBest") as TextBlock;
        this.textblockTotalScore = this.advancedTexture.getControlByName("TextblockTotalScore") as TextBlock;
        this.textblockScoreGame = this.advancedTexture.getControlByName("TextblockScoreGame") as TextBlock;
        this.textblockCenterPhrase = this.advancedTexture.getControlByName("TextblockCenterPhrase") as TextBlock;
        this.textblockCenterPhrase.isVisible = false;
    }

    public updateMainMenuVisibility(isVisible: boolean) {
        this.rectangleMenu.isVisible = isVisible;        
        this.buttonMenu.isVisible = !isVisible;
        this.textblockLevel.isVisible = !isVisible;
        this.rectangleTouch.isVisible = !isVisible;
        this.rectangleTop.isVisible = !isVisible;
        this.rectangleGame.isVisible = !isVisible;
        this.textblockCenterPhrase.isVisible = !isVisible;
    }

    public onButtonMenuStart(callback: () => void): void {
        this.buttonMenuStart.onPointerUpObservable.add(callback);
    }
    public onButtonMenuContinuar(callback: () => void): void {
        this.buttonMenuContinuar.onPointerUpObservable.add(callback);
    }
    public onButtonMenu(callback: () => void): void {
        this.buttonMenu.onPointerUpObservable.add(callback);        
    }

    public onToggleMusic(callback: () => void): void {
        this.textblockMenuMusic.onPointerUpObservable.add(() => {
            callback(); // Chama o callback passado
            this.toggleMusicIcon(); // Atualiza o √≠cone da m√∫sica
        });
    }

    public onButtonLang(callback: () => void): void {
        this.buttonLang.onPointerUpObservable.add(callback);
    }
    
    public toggleMusicIcon(): void {
        this.isMusicOn = !this.isMusicOn; 
        this.textblockMenuMusic.text = this.isMusicOn ? "üîä" : "üîà";
    }

    public buttonUpUp(callback: () => void): void {
        this.buttonUp.onPointerUpObservable.add(callback);
    }
    public buttonDownUp(callback: () => void): void {
        this.buttonDown.onPointerUpObservable.add(callback);
    }
    public buttonRightUp(callback: () => void): void {
        this.buttonRight.onPointerUpObservable.add(callback);
    }
    public buttonLeftUp(callback: () => void): void {
        this.buttonLeft.onPointerUpObservable.add(callback);
    }
    public buttonUpDown(callback: () => void): void {
        this.buttonUp.onPointerDownObservable.add(callback);
    }
    public buttonDownDown(callback: () => void): void {
        this.buttonDown.onPointerDownObservable.add(callback);
    }
    public buttonRightDown(callback: () => void): void {
        this.buttonRight.onPointerDownObservable.add(callback);
    }
    public buttonLeftDown(callback: () => void): void {
        this.buttonLeft.onPointerDownObservable.add(callback);
    }

    public updateScoreText(newScore: number): void {
        this.textblockLevel.text = `Goals: ` + this.getScoreDisplay(newScore);
        //TODO: Remove next two lines for run only when endGame event.
        this.textblockTotalScore.text = `Goals: ` + this.getScoreDisplay(newScore) + ` üèÜ`;
        this.textblockScoreGame.text = this.getRandomBolaFora();
        if(this.topScore < newScore) {
            this.topScore = newScore;
            this.textblockMenuBest.text = this.getScoreDisplay(newScore) + ` üèÜ`;
        }
    }

    private getScoreDisplay(score: number): string {
        if (score < 10) {
            return `${score}`;
        } else if (score < 30) {
            return `${score} ü•â`; 
        } else if (score < 60) {
            return `${score} ü•à`; 
        } else {
            return `${score} ü•á`; 
        }
    }

    public showEndGamePanel(isVisible: boolean): void {
        this.rectangleGame.isVisible = isVisible;
        if(isVisible && !this.textblockCenterPhrase.isVisible) {
            this.textblockCenterPhrase.isVisible = isVisible;    
            this.textblockCenterPhrase.text = this.getRandomPendulumPhrase();
        }
        else{
            this.textblockCenterPhrase.isVisible = isVisible;
        }        
    }

    private getRandomBolaFora(): string {
        const phrases = [
            "‚öΩ Bola Fora! üö´",
            "‚öΩ‚ùå Fora!",
            "ü•Ö ‚û°Ô∏è Bola Fora!",
            "‚öΩ‚¨ÖÔ∏è Fora do Jogo!",
            "üö©‚öΩ Bola Fora!",
            "‚öΩüôÄ Oops! Bola Fora!",
            "‚öΩüí®‚ùå Fora!",
            "üõë‚öΩ Fora de campo!",
            "üò¨‚öΩ Saiu!",
            "‚öΩü§¶‚Äç‚ôÇÔ∏è Bola Fora!",
            "üèÉ‚Äç‚ôÇÔ∏è‚öΩüí• Bola bem fora!",
            "üí¢‚öΩ Fora da √Årea!",
            "üéØ‚ùå Errou! Bola Fora!",
            "‚öΩ‚ú® Fora de Controle!",
            "üö´‚öΩüåÄ Desastre! Bola Fora!"
        ];
    
        // Retorna uma string aleat√≥ria da lista
        return phrases[Math.floor(Math.random() * phrases.length)];
    }
    private getRandomPendulumPhrase(): string {
        const phrases = [
            "‚è±Ô∏è O per√≠odo de oscila√ß√£o de um p√™ndulo simples depende unicamente do comprimento do fio e da acelera√ß√£o da gravidade.",
            "‚öñÔ∏è Quanto maior o comprimento do fio (L), maior ser√° o per√≠odo do p√™ndulo (T), pois T = 2œÄ‚àö(L/g).",
            "üåç A acelera√ß√£o da gravidade (g) afeta diretamente o tempo de oscila√ß√£o: em planetas com menor gravidade, o per√≠odo aumenta.",
            "üìè A equa√ß√£o do per√≠odo de um p√™ndulo simples √© T = 2œÄ‚àö(L/g), onde L √© o comprimento do fio e g √© a acelera√ß√£o da gravidade.",
            "‚öôÔ∏è O movimento do p√™ndulo √© considerado harm√¥nico simples quando o √¢ngulo de oscila√ß√£o √© pequeno (menor que 15¬∞).",
            "üí® A resist√™ncia do ar pode diminuir a amplitude do p√™ndulo ao longo do tempo, mas n√£o altera o per√≠odo em grandezas pequenas.",
            "ü™ù O per√≠odo de oscila√ß√£o de um p√™ndulo n√£o depende da sua amplitude, desde que o √¢ngulo de oscila√ß√£o seja pequeno.",
            "üîÑ O movimento do p√™ndulo √© um exemplo cl√°ssico de convers√£o de energia potencial gravitacional em energia cin√©tica e vice-versa.",
            "üåê Em um p√™ndulo simples, a acelera√ß√£o da gravidade (g) determina a rapidez com que o p√™ndulo oscila, fazendo com que em J√∫piter o per√≠odo seja menor que na Terra.",
            "üî¨ A rela√ß√£o entre o comprimento do fio e o per√≠odo √© diretamente proporcional √† raiz quadrada, ou seja, dobrando o comprimento, o per√≠odo aumenta por ‚àö2.",
            "üìä A amplitude inicial de um p√™ndulo simples (para pequenos √¢ngulos) n√£o influencia o tempo de oscila√ß√£o, apenas o deslocamento angular.",
            "‚öñÔ∏è A energia potencial m√°xima do p√™ndulo ocorre quando ele atinge o ponto mais alto de sua oscila√ß√£o, enquanto a energia cin√©tica √© m√°xima no ponto de menor altura.",
            "üéØ Em um p√™ndulo simples, o per√≠odo de oscila√ß√£o √© independente da massa do corpo, desde que o fio seja inel√°stico e sem massa.",
            "‚è≥ O tempo necess√°rio para o p√™ndulo realizar uma oscila√ß√£o completa n√£o depende da sua velocidade inicial, mas sim das propriedades do sistema (comprimento e gravidade).",
            "ü™ê O efeito gravitacional em planetas com maior massa (como J√∫piter) faz com que o per√≠odo do p√™ndulo seja mais curto que na Terra.",
            "üîã A energia total do p√™ndulo simples √© constante, sendo trocada entre energia potencial (no ponto mais alto) e energia cin√©tica (no ponto mais baixo).",
            "‚öôÔ∏è A velocidade m√°xima do p√™ndulo ocorre quando ele passa pelo ponto de equil√≠brio (ponto mais baixo da oscila√ß√£o).",
            "üìè O comprimento do fio √© o principal fator que determina o per√≠odo de oscila√ß√£o, n√£o sendo influenciado pela massa do objeto que est√° suspenso.",
            "üï∞Ô∏è Em um p√™ndulo simples, o per√≠odo de oscila√ß√£o √© diretamente proporcional √† raiz quadrada do comprimento do fio e inversamente proporcional √† raiz quadrada da acelera√ß√£o da gravidade.",
            "‚öñÔ∏è O √¢ngulo de oscila√ß√£o de um p√™ndulo simples deve ser pequeno (menos de 15¬∞) para que o movimento seja considerado harm√¥nico simples."
        ];
    
        // Retorna uma string aleat√≥ria da lista
        return phrases[Math.floor(Math.random() * phrases.length)];
    }
    
}
